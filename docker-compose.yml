services:
  app:
    build: 
      context: .
      dockerfile: Dockerfile
    container_name: crococroc-nuxt3
    restart: always
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - DATABASE_URL=postgresql://postgres:${POSTGRES_PASSWORD}@db:5432/crococroc?schema=public
      - AUTH_SECRET=${AUTH_SECRET}
      - AUTH_ORIGIN=${AUTH_ORIGIN}
      - NUXT_SESSION_PASSWORD=${NUXT_SESSION_PASSWORD}
    depends_on:
      db:
        condition: service_healthy
    networks:
      - web

  db:
    image: postgres:15-alpine
    container_name: crococroc-db
    restart: always
    ports:
      - "5432:5432"  # Exposé pour le développement local
    environment:
      POSTGRES_DB: crococroc
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - web
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5

  nginx:
    image: nginx:alpine
    container_name: nginx-proxy
    restart: always
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - ./certbot/conf:/etc/letsencrypt:ro
      - ./certbot/www:/var/www/certbot:ro
    depends_on:
      - app
    networks:
      - web
    environment:
      - NGINX_HOST=${NGINX_HOST:-localhost}
      - NGINX_PORT=80

volumes:
  postgres_data:
    name: crococroc_pgdata

networks:
  web:
    name: crococroc_network
    driver: bridge